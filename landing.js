/* ---
   ASSDI Indoor Olympiad - landing.js
   Version: 11.0 (Final Complete Code with Winner Badges)
--- */

// --- Configuration ---
const API_URL = "https://script.google.com/macros/s/AKfycbxh2zabw1i80ieipn8JMPSwLswB1tbt2yy7TuqUUljBmfrTMcXc-v6MGpZzaY7wqKFyMg/exec";
const PARTICIPANT_API_URL = API_URL;
const SCORE_API_URL = `${API_URL}?sheet=scores`;

// --- Event Schedule Data (in 24-hour format) for Dynamic Timeline ---
const EVENT_SCHEDULE = [
    { start: "09:00", end: "09:30", title: "‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü‡¶ø‡¶Ç ‡¶ì ‡¶Ü‡¶∏‡¶® ‡¶ó‡ßç‡¶∞‡¶π‡¶£", category: "‡¶∏‡ßç‡¶•‡¶æ‡¶®: ‡¶Ü‡¶¨‡¶æ‡¶∏‡¶ø‡¶ï", type: "event" },
    { start: "09:30", end: "09:45", title: "‡¶â‡¶¶‡ßç‡¶¨‡ßã‡¶ß‡¶®‡ßÄ ‡¶Ö‡¶®‡ßÅ‡¶∑‡ßç‡¶†‡¶æ‡¶®", category: "‡¶™‡¶¨‡¶ø‡¶§‡ßç‡¶∞ ‡¶ï‡ßÅ‡¶∞‡¶Ü‡¶® ‡¶§‡¶ø‡¶≤‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶§ ‡¶ì ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§ ‡¶¨‡¶ï‡ßç‡¶§‡¶¨‡ßç‡¶Ø", type: "event" },
    { start: "09:45", end: "12:45", title: "‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ‡ßÄ ‡¶∏‡¶Ç‡¶∏‡ßç‡¶ï‡ßÉ‡¶§‡¶ø ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶Ø‡ßã‡¶ó‡¶ø‡¶§‡¶æ", category: "‡¶ï‡ßç‡¶¨‡ßá‡¶∞‡¶æ‡¶§, ‡¶Ü‡¶Ø‡¶æ‡¶®, ‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ‡¶ø‡¶ï ‡¶®‡¶æ‡¶∂‡¶ø‡¶¶", type: "event" },
    { start: "12:45", end: "13:15", title: "‡¶¨‡¶ø‡¶∞‡¶§‡¶ø ‡¶ì ‡¶Ø‡ßã‡¶π‡¶∞‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú", category: "‡¶ú‡¶æ‡¶Æ‡¶æ‡¶§ ‡¶¶‡ßÅ‡¶™‡ßÅ‡¶∞ ‡ßß:‡ß¶‡ß¶ ‡¶ü‡¶æ‡ßü", type: "break" },
    { start: "13:15", end: "14:15", title: "‡¶ï‡¶Æ‡¶ø‡¶â‡¶®‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶ó‡ßá‡¶Æ", category: "‡¶∏‡ßç‡¶•‡¶æ‡¶®: ‡¶Ü‡¶¨‡¶æ‡¶∏‡¶ø‡¶ï", type: "event" },
    { start: "14:15", end: "15:00", title: "‡¶è‡¶ï‡¶æ‡¶°‡ßá‡¶Æ‡¶ø‡¶ï ‡¶ï‡ßÅ‡¶á‡¶ú", category: "‡¶∏‡ßç‡¶•‡¶æ‡¶®: ‡¶≤‡ßç‡¶Ø‡¶æ‡¶¨ ‡ß®", type: "event" },
    { start: "15:00", end: "15:45", title: "‡¶Æ‡¶ß‡ßç‡¶Ø‡¶æ‡¶π‡ßç‡¶®‡¶≠‡ßã‡¶ú", category: "‡¶¨‡¶ø‡¶∞‡¶§‡¶ø", type: "break" },
    { start: "15:45", end: "16:15", title: "‡¶∞‡ßã‡¶≤ ‡¶™‡ßç‡¶≤‡ßá", category: "‡¶∏‡ßç‡¶•‡¶æ‡¶®: ‡¶Ü‡¶¨‡¶æ‡¶∏‡¶ø‡¶ï", type: "event" },
    { start: "16:40", end: "17:50", title: "‡¶™‡ßÅ‡¶∞‡¶∏‡ßç‡¶ï‡¶æ‡¶∞ ‡¶¨‡¶ø‡¶§‡¶∞‡¶£‡ßÄ ‡¶Ö‡¶®‡ßÅ‡¶∑‡ßç‡¶†‡¶æ‡¶®", category: "‡¶∏‡¶Æ‡¶æ‡¶™‡¶®‡ßÄ ‡¶Ö‡¶®‡ßÅ‡¶∑‡ßç‡¶†‡¶æ‡¶®", type: "event" }
];

// --- Mapping & Rules Data ---
const EVENT_NAME_TO_FILTER = {
    '‡¶ï‡ßÅ‡¶∞‡¶Ü‡¶® ‡¶§‡¶ø‡¶≤‡¶æ‡¶ì‡ßü‡¶æ‡¶§': 'kherat', '‡¶ï‡ßç‡¶¨‡ßá‡¶∞‡¶æ‡¶§ (‡¶ï‡ßÅ‡¶∞‡¶Ü‡¶® ‡¶§‡¶ø‡¶≤‡¶æ‡¶ì‡ßü‡¶æ‡¶§)': 'kherat', '‡¶Ü‡¶Ø‡¶æ‡¶®': 'azaan',
    '‡¶®‡¶æ‡¶∂‡¶ø‡¶¶': 'nasheed', '‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ‡¶ø‡¶ï ‡¶®‡¶æ‡¶∂‡¶ø‡¶¶': 'nasheed', '‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ‡¶ø ‡¶∏‡¶Ç‡¶ó‡ßÄ‡¶§': 'nasheed',
    '‡¶∞‡ßã‡¶≤ ‡¶™‡ßç‡¶≤‡ßá / ‡¶®‡¶æ‡¶ü‡¶ø‡¶ï‡¶æ': 'roleplay', '‡¶∞‡ßã‡¶≤ ‡¶™‡ßç‡¶≤‡ßá': 'roleplay', '‡¶è‡¶ï‡¶æ‡¶°‡ßá‡¶Æ‡¶ø‡¶ï ‡¶ï‡ßÅ‡¶á‡¶ú': 'quiz',
    '‡¶ï‡¶Æ‡¶ø‡¶â‡¶®‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶ó‡ßá‡¶Æ': 'communication',
};
const EVENT_RULES = {
    "all": { name: "‡¶™‡ßÇ‡¶∞‡ßç‡¶£‡¶æ‡¶ô‡ßç‡¶ó ‡¶®‡¶ø‡ßü‡¶Æ‡¶æ‡¶¨‡¶≤‡ßÄ", rules: "‡¶∏‡¶ï‡¶≤ ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü ‡¶∂‡ßá‡¶∑‡ßá ‡¶Ø‡ßá ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö‡ßá‡¶∞ ‡¶∏‡¶∞‡ßç‡¶¨‡¶Æ‡ßã‡¶ü ‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶¨‡¶ö‡ßá‡ßü‡ßá ‡¶¨‡ßá‡¶∂‡¶ø ‡¶π‡¶¨‡ßá, ‡¶∏‡ßá‡¶á ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö‡¶ï‡ßá \"‡¶ö‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶™‡¶ø‡¶Ø‡¶º‡¶®\" ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶ò‡ßã‡¶∑‡¶£‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá‡•§", players: "‡¶è‡¶ï‡¶ú‡¶® ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶Ø‡ßã‡¶ó‡ßÄ ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡ß©‡¶ü‡¶ø ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü‡ßá ‡¶Ö‡¶Ç‡¶∂ ‡¶®‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡•§" },
    "kherat": { name: "‡¶ï‡ßç‡¶¨‡ßá‡¶∞‡¶æ‡¶§ (‡¶ï‡ßÅ‡¶∞‡¶Ü‡¶® ‡¶§‡¶ø‡¶≤‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶§)", rules: "‡¶è‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶è‡¶ï‡¶ï ‡¶™‡¶∞‡¶ø‡¶¨‡ßá‡¶∂‡¶®‡¶æ‡•§ ‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡ßá‡¶ï ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá ‡ßß ‡¶ú‡¶® ‡¶Ü‡¶≤‡ßá‡¶Æ ‡¶è‡¶¨‡¶Ç ‡ßß ‡¶ú‡¶® ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶≤ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶ó‡ßç‡¶∞‡¶æ‡¶â‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶Ø‡ßã‡¶ó‡ßÄ ‡¶Ö‡¶Ç‡¶∂ ‡¶®‡ßá‡¶¨‡ßá‡¶®‡•§ ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡ß© ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü ‡¶∏‡¶Æ‡ßü ‡¶™‡¶æ‡¶¨‡ßá‡¶®‡•§", players: "‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö ‡¶•‡ßá‡¶ï‡ßá ‡ß® ‡¶ú‡¶®‡•§" },
    "azaan": { name: "‡¶Ü‡¶Ø‡¶æ‡¶®", rules: "‡¶è‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶è‡¶ï‡¶ï ‡¶™‡¶∞‡¶ø‡¶¨‡ßá‡¶∂‡¶®‡¶æ‡•§ ‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡ßá‡¶ï ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö ‡¶•‡ßá‡¶ï‡ßá ‡ß® ‡¶ú‡¶® ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶Ø‡ßã‡¶ó‡ßÄ ‡¶Ö‡¶Ç‡¶∂ ‡¶®‡ßá‡¶¨‡ßá‡¶®‡•§", players: "‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö ‡¶•‡ßá‡¶ï‡ßá ‡ß® ‡¶ú‡¶®‡•§" },
    "nasheed": { name: "‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ‡¶ø‡¶ï ‡¶®‡¶æ‡¶∂‡¶ø‡¶¶", rules: "‡¶è‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶è‡¶ï‡¶ï ‡¶™‡¶∞‡¶ø‡¶¨‡ßá‡¶∂‡¶®‡¶æ‡•§ ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö ‡¶•‡ßá‡¶ï‡ßá ‡ß® ‡¶ú‡¶® ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶Ø‡ßã‡¶ó‡ßÄ ‡¶Ö‡¶Ç‡¶∂ ‡¶®‡ßá‡¶¨‡ßá‡¶®‡•§ ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡¶∏‡¶Æ‡¶Ø‡¶º ‡ß© ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü‡•§", players: "‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö ‡¶•‡ßá‡¶ï‡ßá ‡ß® ‡¶ú‡¶®‡•§" },
    "roleplay": { name: "‡¶∞‡ßã‡¶≤ ‡¶™‡ßç‡¶≤‡ßá", rules: "‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡¶¨‡¶∏‡ßç‡¶§‡ßÅ ‡¶§‡¶æ‡ßé‡¶ï‡ßç‡¶∑‡¶£‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶¨‡ßá‡•§ ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡¶∏‡¶Æ‡¶Ø‡¶º ‡ß© ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü‡•§", players: "‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö ‡¶•‡ßá‡¶ï‡ßá ‡ß® ‡¶ú‡¶®‡•§" },
    "quiz": { name: "‡¶è‡¶ï‡¶æ‡¶°‡ßá‡¶Æ‡¶ø‡¶ï ‡¶ï‡ßÅ‡¶á‡¶ú", rules: "Kahoot ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶ü‡¶´‡¶∞‡ßç‡¶Æ‡ßá ‡¶è‡¶Æ‡¶è‡¶∏ ‡¶è‡¶ï‡ßç‡¶∏‡ßá‡¶≤, ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°, ‡¶°‡¶ø‡¶ú‡¶ø‡¶ü‡¶æ‡¶≤ ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü‡¶ø‡¶Ç ‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡ßá ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ ‡¶π‡¶¨‡ßá‡•§", players: "‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö ‡¶•‡ßá‡¶ï‡ßá ‡ß´ ‡¶ú‡¶®‡•§" },
    "communication": { name: "‡¶ï‡¶Æ‡¶ø‡¶â‡¶®‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶ó‡ßá‡¶Æ", rules: "‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶¶‡¶≤‡ßá ‡ßß‡ßß ‡¶ú‡¶® ‡¶ñ‡ßá‡¶≤‡ßã‡¶Ø‡¶º‡¶æ‡¶°‡¶º ‡¶•‡¶æ‡¶ï‡¶¨‡ßá‡¶® ‡¶è‡¶¨‡¶Ç ‡¶Ö‡¶ô‡ßç‡¶ó‡¶≠‡¶ô‡ßç‡¶ó‡¶ø‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶ö‡¶æ‡¶≤‡¶æ‡¶ö‡¶æ‡¶≤‡¶ø ‡¶ï‡¶∞‡¶¨‡ßá‡¶®‡•§", players: "‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö ‡¶•‡ßá‡¶ï‡ßá ‡ßß‡ßß ‡¶ú‡¶®‡•§" },
};

// --- Main Execution on DOMContentLoaded ---
document.addEventListener('DOMContentLoaded', () => {
    buildTimeline();
    fetchDataAndRender();
    setupFilterButtons();
    filterSelection("all");
});

/**
 * Builds the timeline dynamically and highlights the current event.
 */
function buildTimeline() {
    const timelineContainer = document.getElementById('timeline-container');
    if (!timelineContainer) return;
    const now = new Date();
    let activeEventFound = false;

    const timelineHTML = EVENT_SCHEDULE.map((event, index) => {
        const position = index % 2 === 0 ? 'right' : 'left';
        const eventClass = event.type === 'break' ? 'break' : '';
        const startTime = new Date(now.toDateString() + ' ' + event.start);
        const endTime = new Date(now.toDateString() + ' ' + event.end);
        let isActive = '';
        if (!activeEventFound && now >= startTime && now < endTime) {
            isActive = 'active-event';
            activeEventFound = true;
        }
        return `
            <div class="timeline-item ${position} ${eventClass} ${isActive}">
                <div class="timeline-content">
                    <div class="event-time">${event.start} - ${event.end}</div>
                    <h3 class="event-title">${event.title}</h3>
                    <p class="event-category">${event.category}</p>
                </div>
            </div>
        `;
    }).join('');
    timelineContainer.innerHTML = timelineHTML;
}

/**
 * Fetches both participant and score data, then renders the showcase.
 */
async function fetchDataAndRender() {
    const grid = document.getElementById('showcase-grid');
    try {
        const [participantRes, scoreRes] = await Promise.all([
            fetch(PARTICIPANT_API_URL),
            fetch(SCORE_API_URL)
        ]);

        if (!participantRes.ok) throw new Error("Failed to fetch participant data.");
        
        const participants = await participantRes.json();
        let scores = { player_leaderboard: [] };
        if (scoreRes.ok) {
            const scoreData = await scoreRes.json();
            if (scoreData.status !== 'unpublished') {
                scores = scoreData;
            }
        } else {
            console.warn("Could not fetch score data. Winner badges will not be shown.");
        }
        
        const processedParticipants = mergeWinnerData(participants, scores.player_leaderboard);
        renderParticipantCards(processedParticipants);
        filterSelection("all");

    } catch (error) {
        console.error("Data fetching error:", error);
        grid.innerHTML = `<div class="alert alert-danger w-100">‡¶°‡ßá‡¶ü‡¶æ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨ ‡¶π‡ßü‡¶®‡¶ø‡•§</div>`;
    }
}

/**
 * Merges winner information from scores into the participant list.
 */
function mergeWinnerData(participants, playerScores) {
    const winnerMap = new Map();
    if (playerScores && Array.isArray(playerScores)) {
        playerScores.forEach(player => {
            const key = `${player.event}-${player.roll}`;
            if (player.roll && player.position && player.position <= 3) {
                 winnerMap.set(key, player.position);
            }
        });
    }

    return participants.map(p => {
        const filterClass = EVENT_NAME_TO_FILTER[p.EventName.trim()] || 'unknown';
        const key = `${p.EventName}-${p.Roll}`;
        const position = winnerMap.get(key);
        let badge = '';
        if (position === 1) badge = 'gold';
        if (position === 2) badge = 'silver';
        if (position === 3) badge = 'bronze';
        
        return { ...p, filterClass, badge };
    });
}

/**
 * Renders participant cards to the grid.
 */
function renderParticipantCards(participants) {
    const grid = document.getElementById('showcase-grid');
    grid.innerHTML = '';
    if (!participants || participants.length === 0) {
        grid.innerHTML = `<p class="text-center text-muted w-100">‡¶ï‡ßã‡¶®‡ßã ‡¶Ö‡¶Ç‡¶∂‡¶ó‡ßç‡¶∞‡¶π‡¶£‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§</p>`;
        return;
    }
    const cardsHTML = participants.map(p => {
        const badgeHTML = p.badge ? `<span class="winner-badge">${p.badge === 'gold' ? 'ü•á' : p.badge === 'silver' ? 'ü•à' : 'ü•â'}</span>` : '';
        return `
            <div class="participant-showcase-card filterDiv ${p.filterClass}" data-roll="${p.Roll}" data-event="${p.EventName}">
                ${badgeHTML}
                <span class="event-tag">${p.EventName}</span>
                <span class="name">${p.Name}</span>
                <span class="batch">${p.BatchName}</span>
                <span class="roll">‡¶∞‡ßã‡¶≤: ${p.Roll}</span>
            </div>
        `;
    }).join('');
    grid.innerHTML = cardsHTML;
}

/**
 * Sets up event listeners for filter buttons.
 */
function setupFilterButtons() {
    const filterButtons = document.querySelectorAll('.filter-btn');
    filterButtons.forEach(button => {
        button.addEventListener('click', (e) => {
            e.preventDefault();
            filterButtons.forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');
            filterSelection(button.getAttribute('data-filter')); 
        });
    });
}

/**
 * Filters participant cards and updates the rules display.
 */
function filterSelection(c) {
    const eventNameElement = document.getElementById('current-event-name');
    const rulesContentElement = document.getElementById('event-rules-content');
    const eventData = EVENT_RULES[c] || EVENT_RULES['all'];
    eventNameElement.textContent = eventData.name;
    rulesContentElement.innerHTML = `
        <h5 class="mt-4 fw-bold" style="color: var(--text-bright);">‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶®‡¶ø‡ßü‡¶Æ‡¶æ‡¶¨‡¶≤‡ßÄ:</h5>
        <ul class="list-unstyled">
            <li><i class="bi bi-info-circle-fill me-2" style="color: var(--brand-light-green);"></i> ${eventData.rules}</li>
            <li><i class="bi bi-person-circle me-2" style="color: var(--brand-light-green);"></i> ‡¶Ö‡¶Ç‡¶∂‡¶ó‡ßç‡¶∞‡¶π‡¶£‡ßá‡¶∞ ‡¶ï‡ßã‡¶ü‡¶æ: ${eventData.players}</li>
            <li><i class="bi bi-award-fill me-2" style="color: var(--brand-orange);"></i> ‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ: ‡ßß‡¶Æ: ‡ßß‡ß¶, ‡ß®‡ßü: ‡ß≠, ‡ß©‡ßü: ‡ß´ ‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü‡•§ ‡¶Ö‡¶Ç‡¶∂‡¶ó‡ßç‡¶∞‡¶π‡¶£: ‡ß® ‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü‡•§</li>
        </ul>
    `;
    document.querySelectorAll('.filterDiv').forEach(card => {
        card.classList.remove('visible');
        if (c === 'all' || card.classList.contains(c)) {
            setTimeout(() => card.classList.add('visible'), 10);
        }
    });
}